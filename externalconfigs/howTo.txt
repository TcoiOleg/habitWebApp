1. Add to maven runner 
-Dmaven.multiModuleProjectDirectory=$M2_HOME
Idea - Build, Execution, Deployment->Build Tools->Maven->Runner

2. Add to maven settings.xml tags (user/.m2/settings.xml or $M2_HOME/conf/settings.xml)
<servers>
	<server>
		<id>TomcatServer</id>
		<username>admin</username>
		<password>admin</password>
	</server>
</servers>

3. Add to tomcat tomcat-users.xml tags (tomcatHome/conf/tomcat-users.xml)
<role rolename="manager"/>
<role rolename="admin"/>
<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<user username="admin" password="admin" roles="admin,manager,manager-gui,manager-script"/>

4. Start tomcat.
5. run mvn tomcat7:deploy (mvn tomcat7:redeploy) in project root

http://blog.devcanvas.org/deploy-a-web-application-from-the-command-line-by-using-tomcat-maven-plugin/#lightbox/7/

for db (mysql workbench)
create model and db
https://dev.mysql.com/doc/workbench/en/wb-getting-started-tutorial-creating-a-model.html
insert data in db
https://dev.mysql.com/doc/workbench/en/wb-getting-started-tutorial-adding-data.html
get connection - database -> manage connections (or create the new one)
maven - mysql-connector-java

for jdbc templates
<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
<bean id="jdbcCall" class="org.springframework.jdbc.core.simple.SimpleJdbcCall">
	<constructor-arg ref="dataSource"/>
</bean>
jdbcCall.getJdbcTemplate()

for hibernate + spring
add maven dependencies hibernate-entitymanager and hibernate-core and spring-orm, spring-tx
hibernate LocalSessionFactoryBean with <property name="mappingResources"> for files mappings /hibernate/Habit.hbm.xml
in resources. <property name="dataSource"  dbcp2.BasicDataSource
MySQLDialect
add HibernateTransactionManager with <property name="sessionFactory" and PersistenceExceptionTranslationPostProcessor

for jpa + spring
create pojo with annotations: javax.persistence.Entity, @Table, @Id, @Column etc
add persistence.xml to resources/META-INF and configure it
add EntityManager with annotation @PersistenceContext +
<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>
add  <bean id="emf" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
<property name="persistenceUnitName" value="habitPU" /> </bean>
entityManager.find(Habit.class, id)
be carefull with persistence config - because it affects db

for caching (ehcache)
add spring-context-support, spring-aspects, ehcache maven dependencies
add ehcache.xml resource
add xmlns:cache xmlns:aop to spring conf
add EhCacheCacheManager, EhCacheManagerFactoryBean, <cache:advice>, <aop:advisor advice-ref="cacheAdvice" spring
https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html
https://www.mkyong.com/spring/spring-caching-and-ehcache-example/

for transaction management
1 for xml. add xmlns:aop, xmlns:tx, add transactionManager bean, <tx:advice> and  <aop:advisor... advice-ref="txAdvice"
2 for annotation. add transactionManager bean, @EnableTransactionManagement and  @Transactional on method/class

for spring mvc
model is a POJO, controller and view - jsp
add spring-webmvc to maven dependencies, DispatcherServlet to web.xml, <servlet-name>-servlet.xml to resources
add servlet mapping to <url-pattern>/</url-pattern> and add InternalResourceViewResolver with preffix and suffix
add controller (@Controller) and @RequestMapping, method's return parameter is name of view
for using tiles
add tiles-extras to dependencies, TilesViewResolver, TilesConfigurer and views.xml resource with <tiles-definitions>
for validation api
add hibernate-validator to maven (maybe javax api, but it has not validate with BindingResult)
add @Valid to POJO in Controller
http://www.mkyong.com/spring3/spring-3-mvc-hello-world-example-annotation/
http://www.codingpedia.org/ama/spring-mvc-and-apache-tiles-integration-example/
!!!! <td><spring_form:errors path="name" cssClass="error" /></td> not working!